introduction Java Script by eko kurniawan kanedi (Programer Zaman Nam)

SEJARAH
- jasascrip di buat di tahun 1995, pembuat brandan eich programmer di perusahaan netscape
- JAVASCRIPT dibuat agar website lebih i nteraktif
- javascript bisa dijalankan di server dengan node js

TIPE DATA NUMBER
- JavaScript hanya mendukung satu tipe data number. Tipe data number di JS bisa berupa bilangan bulat atau desimal
- bilangan bulat dan desimal/pecahan dii JS jadi bilangan number.

TIPE DATA BOOLEAN
- yaitu tipe data yang berisikan data kebenaran atau hanya ada dua data, benar atau salah
- benar(true) dan salah(false)
- tipe data boolean banyak di gunakan di berbagai fiture pemrograman

TIPE DATA STRING
- string artinya text bisa kosong bisa banyak karakter
- tanda per=tik satu (') atau (") untuk membua string
- menambahkan string menggunaka oprator + (plush)
Escape sequence pada string
- yaitu karakter khusus
- \n = enter
- \t = tab
- \' = kutip satu
- \" = ktip dua
- \\ = slash

VARIABLE
- yaitu tempat untuk menyimpan data
- var, let, const
- const tida bisa di ubah
- const = constanta
cara mengubah variable :
- nama variable = nilai value

OPERATOR ARITMATIKA
-JavaScript mendukung banyak operator matematika untuk tipe data number, seprti:
	1. Operator Aritmatika
	2. Operator Augmented Assigment
	3. Operator Unary
	4. Operator perbandingan
	5. Dan lain-lain
1.Operator Aritmatika
 + = pertambahan
 - = pengurangan
 * = perkalian
 ** = pangkat atau exponensial
 / = pembagian
 % = sisa bagi atau modulus
2. Operator Ausegment Assigment
- yaitu oprator penugasan tambahan
oprator aritmatika -> samadengan
3. Operator Unary
-yaitu oprator yang biasanya cukup memerlukan satu data
+ = menandakan nilai positif
- = nilai negatif
++ = menaikan 1 angka
-- = menurunkan 1 angka
4. Operator Perbandingan
 - yaitu oprator untuk membandingkan dua buah data yang menghasilkan nilai boolean (benar atau salah)
 - benar = true
 - salah = false
 beberapa oprator perbandingan :
 > = lebih dari
 < = kurang dari
 >= = lebih dari samadengan
 <= = kurang dari samadengan
 == = sama dengan
 === = sama dengan sama type
 != = tidak sama dengan
 !== = tidak sama dengan sama type
5. Operator Logika
 - yaitu oprator untuk dua buah data boolean dan hasilnya boolean lagi
 macam2 operator logika
 1. && = dan
 2. || = atau
 3. ! = kebalikan
1. Operator &&
 true && true = true
 true && false = false
 false && true = false
 false && false = true
2. Operator ||
 true || true = true
 true || false = true
 false || true = true
 false || false = false
3. Operator !
 digunakan untuk satu data
 ! true dibalikan nilaina jadi false
 ! flse dibalikan nilainya jadi true

CONSOLE
-fitur untuk melakukan logging
 logging = untuk menampilkan info dari aplikasi yang sedang berjalan tanpa mengganggu alur kerja dan interaksi
macam2 console :
1. console method
 - console.info()/console.log() = memberitahu informasi
 - console.warn() = memberitahu info peringatan
 - console.error() = memberitau informasi error
 - console.table() = memberitahu info dalam bentuk table

STRING TAMPLATE
- bisa mengambil data variable, atau bahkan melakukan operasi matematika
- cara pembuatan stringnya harus menggunakan ` (backtick)

KONVERSI STRING DAN NUMBER
- saat membuat aplikasi, 
kadang kita input dari pengguna selalu dalam bentuk string, sedangkan kita mengelolanya dalann bentuk number, 
maka sangat disarankan melakukan konversi tipe data
caranya :
parseInt(string) = mengkonversi dari string ke number (bilangan bulat)
parseFloat(string) = mengkonversi dari string ke number (bilangan pecahan)
Number(string) = mengkonversi dari tring ke number (bilangan bulat atau pecahan)
number.toString() = mengkonversi dari number ke string

NaN (Not a Number)
 didalam namber ada namber unik namanya NaN
NaN adalah kejadian kalau mengkonversi data yang tidak valid

isNaN() Function
untuk pengecekan number hasilnya berupa data boolean
true jika NaN
false jika bukan NaN

TIPE DATA ARRAY
- adalah tipe data yanng berisikan kumpulan data
- memiliki sifat dinamis, data bisa bertambah dengan sendirinya saat kita memasukan data ke dalam array
Cara Kerja Array
1. Setiap data array akan disimpan dalan posisi berurutan, urutan pertama dimulai dari 0
2. Setiap menambahkan data ke array, otomatis data akan disimpan di urutan terakhir
3. Urutan di array disebut index
Cara menambah data array
- namaVariable.push();
Operasi di Array
1. array.push(value) = menambah data ke array
2. array.length = Untuk mendapatkan panjang array
3. array[index] = Mendapatkan data di posisi index
4. array[index] = value (yaitu untuk menambah data di posisi index)
5. delete array[index] = untuk menghapus data di posisi index, namun index tidak bergeser
Penting diingat saat menggunakan tipe data array
1. data di dalam array ada batasnya harus data apa
2. jadi kita biksa memasukan data apapun ke dalam array
3. bahkan bisa memasukan array ke dalam array jika mau

TIPE DATA OBJECT
- data object adalah tipe data yang mirip dengan tipe data array
- yang membedakan adalah index pada tipe data object bisa menggunakan string
- index di object biasanya disebut attributes atau properties, bukan index

IF EXPRESSION
- if adalah salah satu kunci dalam percabangan
- percabangan = kita bisa mengeksekusi kode program tertentu ketika suatu kondisi terpenuhi
- hampir di semua bahasa pemorograman mendukung if expression
Else exrpression 
- blok if akan dieksekusi ketika kondisi if bernilai true
- kadang kita ingin melakukan eksekusi program tertentu jika kondisi if bernilai false
- hali ini bisa dilakukan menggunakan else expression
Else if
- kadang dalam if, kita butuh membuat beberapa kondisi
- kasus seperti ini, di javascript bisa menggunakan Else if expression


POP UP
 alert, prompt dan confirm adalah fitur dari javascript
	1. Alert
	 digunakan untuk memberi peringatan berupa popup text di browser
	2. Prompt
	 digunakan untuk mmeminta input string dari user dalam bentuk pop up input text
	3. sedangkan confirm digunakan untuk meminta boolean dari pengguna browser dalam bentuk popup input pilihan


UNDEFINED
 - adalah sebuah kata kunci di javascript, merupakan tipe data
 - sebuah variable yang belum memiliki nilai, maka artinya variable tersebut merupakan tipe undefined
 - undefined itu berbeda dengan null di bahasa pemrograman javascript


NULL
 - merupakan representasi dari data kosong
 - perbedaan null dan uundefined yaitu null berarti variable sudah di tambahkan valuenya, hanya saja bale nya null
 - sedangkan undefined adalah variable belum di tambahkan value nya


SWITCH EXPRESSION
 - Adalah statement percabangan yang sama dengan if, namun lebih sederhana cara pembuatannya
 - kondisi di switch statement hanya untuk perbandingan sama dengan


OPERATOR TYPEOF
 - merupakan operator yang bisa kita gunakann untuk melihat tipe data sebuah value atau variable
 - typeof diginakan untuk mengecek tipe data sebuah value atau variable menggunakan oerator typrof
 - hasil dari operator typrof adalah string tipe datanya


OPOERATOR IN
 - adalah operator yang bisa kita lakukan untuk mengecek apakah sebuah property ada di dalm object atau tidak
 - Jika property tersebuat ada di object maka hasilnya true, sedangkan jika tidak maka hasilnya false
 - tidak hanya di object, In juga bisa digunakan untuk mengecek index di array
Penting diingat
 - in oprator hanya mengecek ada atau tidak
 - walaupun nilai property atau index nya undefined atau null, maka tetap akan dianggap ada


OPERATOR TERNARY
 - Adalah bentuk sederhana dari if statement
 - terdiri dari kondisi yang di evaluasi, jika menghasilkan true maka nilai pertama diambil, jika false, maka nilai keduan yang diambil


NULLISH COALESCING OPERATOR
 - nullish value adalah null dan undefined
 - nullish coalescing operator (??) adalah operator mirip dengan ternary operator, bedanya adalah pada posisi, jika bernilai null atau undefined, value default nya di ammbil


OPTIONAL CHAINING
 - atau operator (?) merupakan oprerator yang dignakan untuk mengamankan ketika ingin mengakses property sebuah object dari data nullish
 - jika kita mencoba mengakses property dari sebuah object dari data nullish tanpa menggunakan optional chaining operator, maka akan terjadi error


FALSY
 - adalah value yang ketika dalam kontek boolean, dia dianggap false.
 - di JS, kondisi itu tidak hanya boolean, tapi di luar boolean pun bisa, namun kita harus tahu berapa data yang dianggap false

 Data Falsy
 false --> Boolean false
 0, -0 --> Number 0 dan -0 dianggap false
 "", '', `` --> Semua string kosong dianggap false
 null --> null dianggap false
 undefine --> dianggap false
 NaN --> Not a Number dianggap false

TRUTHY
- kebalikan dari falsy, dimana datanya dianggap bernilai true
- Untuk mengetahui data true, yaitu data yang bukan bernilai falsy 


OPERATOR LOGIKA DI NON BOOLEAN
- JS bisa menggunakan operator logika AND dan OR untuk tipe data non boolean

Operator OR (||) di Non Boolean
- Operator logika OR (||), membaca dari kiri ke kekanan
- Operator ini akan mengambil nilai pertama yang TRUTHY
- Jika tidak ada satupuun yang bernilai truthy, maka yang terakhir yang akan diambil

Operator AND (&&) di Non Boolean
- Operator logika AND (||), membaca dari kiri ke kanan.
- Operator ini akan menga,bil nilai pertama yang falsy
- Jika ada satupun yang bernilai falsy, maka yang terakhir akan diambil


FOR LOOP
 - For adalah salah satu kata kunci yang bisa digunakan untuk melakukan perulangan
 - blok kode yang terdapat di dalam for akan selalu diulangi selama kondisi for terpenuhi

 Sintak perulangan For
 for(init statement; kondisi; post statement) {
	//block perulangan
 }
  
  - init statement akan dieksekusi hanya sekali si awal sebelum perulangan
  - kondisi akan dilakukan pengecekan dalam setiap perulangan, jika true perulangan akan di lakukan, jika false perulangan akan berhenti
  - Post statement akan dieksekusi setiap kali diakhir perulangan\
  - Init statement, kondisi dan post statement tidak wajib diisi, kebarti kondisi selalu berniali true


WHILE LOOP
   	- adalah versi perulangan yang lebih sederhana dibanding for loop
	- di while loop, hanya terdapat kondisi perulangan, tanpa ada init statement dan post statement 


DO WHILE LOOP
	- do wwhile loop mirip dengan while loop
	- perbedaannya hanya pada pengecekan kondisi
	- pengecekan kondisi di while loop dilakukan diawal sebelum perulangan dilakukan, sedangkan do do while loop di lakukan setelah perulangan
	- olehkarna itu dalam do while loop, minimmal pasti sekali perulangan dilakukan walaupun kondisi tidak bernilai true


BREAK & CONTINUE
	 - pada switch statement kita sudah mengenal kata kunci break, yaitu untuk menghentikan case dalam switch
	 - sama dengan pada perulangan, break juga digunakan untuk menghentikan seluruh perulangan.
	 - Namun berbeda dengan continue, continue digunakan untuk menghentikan perulangan saat ini, lalu melanjutkan ke perulangan selanjutnya.


LABEL
	- fitur label merupakan penanda yang bisa digunakan dengan kata kunci break dan continue
	- secara default saat kita melakukan break atau continue, dia akan melakukan terhadap perulangan dimana kode break dan continue itu digunakan
	- dengan menggunakan label, kita bisa melakukan break dan continue terhadap perulangan yang kita inginkan, asal pada perulangannya kita gunakan label
	- untuk membuat label, kita bisa gunakan nama label lalu diikuti dengan : (titik dua)


FOR IN
	- For in mrupakan perulangan for yang digunakan untuk mengiterasi/ngecheck seluruh data property di objek atau index di array
	- Walaupun for in bisa digunakan untuk array, namun tidak direkomendasikan untuk array, karna biasanya kita jarang sekali butuh data nomer index untuk array, kita bisa menggunakan For Of (yang dibahas setelah ini)


FOR OF
	- Jika for in digunakan untuk melakukan iterasi/mengecheck property atau index, berbeda dengan for of, ini digunakan untuk melakukan iterasi terhadap isi value dari iterable object, seperti array, string dan lain-lain
	- for of tidak bisa digunakan untuk melakukan itrasi dari data di object, karna object bukanlah iterable.


WITH STATEMENT 
	- With statement merupakan fitur yang digunakan untuk menurunkan sebuah scope data
	- Dengan menggunakan with statement, kita bisa menggunakan property dalam sebuah data tanpa harus menyebut dirinya. biasanya digunakan untuk mengakses property sebuah objek 

	with statement tidak si rekomendasikan 
	- walaupun  fiture eith statement ini sangat menarik
	- namun kebanyakan orang tidak merekomendasikan penggunaan with statement
	- hal ini dikarnakan with statement kadang membuat sebuah kode menjadi ambigu


FUNCTION 
	- Function adalah blok kode program yang akan berjalan saat kita panggil
	- Sebelum kita mnggunakan function writln() untuk menampilkan tuliasan di html
	- Untuk membuat function, kita bisas menggunakan kata kunci function, lalu diikuti dengan nama functionn, kurung () dan diakhiri dengan blok kurung {}
	- Kita bisa memanggil function dengan menggunakann nama function laluu diikuti dengan kurung ()
	- Di bahasa pemograman lain, function juga disebut dengan method


FUNCTION PARAMETER
	- Kita bisa mengirim informasi ke function yang ingin kita panggil
	- Untuk melakukan hal tersebut, kita perlu menambahkan parameter atau argument di function yang ssudah kita buat
	- Parameter ditempatkan didalam kurung () di deklarasi method
	- Parameter bisa lebih dari satu, jika lebih dari satu, harus dipisah menggunakan tanda koma


FUNCTION RETURN VALUE 
	- Secara defaul, function itu tidak menghasilkan value apapun, namun jika kita ingin, kita isa membuat sebuah function mengembalikan value
	- Agar function bisa menghasilkan value, untuk menghasilkan nilai tersebut, kita bisa menggunakan kata kunci return didalm functionnya
	- Dan di dalam block function, untuk menghasilkan nilai tersebut, kita harus menggunakan kata kunci return, lalu diikuti dengan data yang ingin kita hasilkan
	- function hanya bisa mngembalikan satu data, jika kita ingin mengembalikan beberapa data sekaligus, kita bisa menggunakan array sebagai return value nya

	Menghentikan eksekusi dengan return
	- saat kita menggunakan kata kunci return, maka kode setelah return tersebut tidak akan di eksekusi
	- kita bisa menggunakan return untuk menghentikan eksekusi sebuah function 


OPTIONAL PARAMETER
	- Secara default, parameter di function itu optional
	- Artinya kita tidak wajib mengisi valuenya ketika memanggil function
	- Jika tidak ada value yang kita kirim ke parameter ketika meemanggil function, maka secara otomais parameter tersebut bernilai undefined


DEFAULT PARAMETER
	- Sekarang kita tahu bahwa parameter itu optional, artinya kita bisa tidak memberi value terhadap perameter
	- Parameter juga bisa kita beri default, artinya jika ketika kita tidak mengirim data ke parameter atau kita mengirim data unfined, maka secara otomatis parameter akan diisi oleh dafault value


REST PARAMETER
	- Rest Parameter adalah fitur dimana kita bisa mengirim data sebanyak-banyaknya pada satu parameter, dan secara otomatis akan dikonversi menjadi array
	- Untuk membuat Rest parameter, ada ketentuannya
	- Reat parameter hanya boleh ada satu fuunction, tidak boleh lebih dari satu
	- Rest parameter hanya boleh berada diposisi paling akhir, tidak boleh didepan atau ditengah, kecuali memang cuma ada satu parameter
	- di bahassa pemograman lain, ada juga yang bilang ini adalah variabl argument

	Spread syntax
	- Kadang kita terlanjur memiliki data berupa array
	- Tapi untungnya kita juga bisa mengirim array ke rest parameter
	- Kita bisa guunakan ...(titik tiga kali)
	- fiture ini dinamakan Spread Syntax

	Argument object
	- Sebelum ada fitur rest parameter, di JS sudah ada fitur yang bernama argument object
	- Ini adalah fitur dimana kita bisa mengambil semua parameter dalam bentuk array dengan menggunakan object bernama arguments
	- Arguments secara otomatis bisa digunakan di functions
	- Namun perlu diingat, bahwa untuk JS saat ini, lebih baik disarankan mengunakan rest parameteer dibanding arguments object 


FUNCTION SEBAGAI VALUE
	- Function tidak hanya bisa digunakan kode program yang dieksekusi, tapi bisa juga sebagai value
	- Artinya, function bisa disimpan di variable, bisa juga dikirim melalui parameter ke function laininya.


ANONYMOUS FUNCTION
	- Sebelumnya kita selalu membuat function dengan nama
	- Kita juga bisa membuat function tanpa nama functionn, atau istilahnya adalah anonymous function
	- Kita bisa membuat anonymous function dalam sebuah variable atau bisa juga kita buat ketika mengisi parameter


FUNCTION DALAM FUNCTION(nested function)
	- Tidak ada batasan dimana kita bisa membuat function
	- Termasuk jika kita ingin membuat function di dalam sebuah function, kita bisa melakukannya
	- Function yang terdapat didalam, kita sebut inner function
	- Inner function hanya bisa diakses di tempat kita membuat functionnya, tidak bisa diakses dari luar functionnya


SCOPE 
	- Scope merupakan area akses sebuah data
	- Ada dua jenis scope, global scope dan local scope
	- Seiap kita membuat function, maka kita akan membuat locall scope untuk function tersebut
	- Data di global scope bisa diakses dari local scope, namun data di local scope hanya bisa di akses di local scope tersebut atau di scope local dibawahnya (dalam kasus function dalam function)


RECURSIVE FUNCTION
	- Adalah kemampuan function memanggil function dirinya sendirinya
	- Kadang memeang ada banyak problem, yang lebih mudah diselesaikan menggunakan recursive function, seperti contohnya kasus factorial


FUNCTION GENERATOR
	- Function generator adalah functio yang digunakan untuk mmembuat data generator 
	- Generator adalah data yang bisa diinterasi seperi array
	- Untuk membuat function generator, kita perlu menggunakan tanda * (bintang) setelah kata function.
	- Dan untuk mengembalikan data di tiap iterasi, kita bisa gunakan kata kunci yield diikuti datanya.

	Lazy Evaluation
	- Generator itu sifatnnya Lazy
	- Jadi artinya jika data belum kita ambil dari generator, maka yield selanjutnya tidak akan di eksekusi


AROW FUNCTION
	- Arrow fuction adalah alternatif pembuatan function yang lebih sederhana dari function biasanya.
	- namun terdapat limitasi dan juga tidak bisa digunakan di semua situasi.
	- Dinamakan arrow function karna menggunakan tanda => (seperti panah)
	- Berikut contoh beberapa kekurangan arrow function :
		1. tidak memiliki fiture argumen object
		2. tidak bisa menggunakan function generator
		3. tidak bisa mengakses this(yang nanti akan dibahas di functional di object)
		4. tidak bisa mengakses super(yang nanti akan dibahas di javascript object oriented programming)

	Arrow function tanpa blok
		- Jika sebuah arrow function isinya sederhana, misal hanya satu baris.
		- Kita bisa membuat arrow function tanpa harus menggunakan blok.


	Arrow Function Sebagai Return Value
		- Arrow function bisa mengembalikan value, sama seperti function biasanya
		- Jika menggunakan block, maka kita perlu menggunakan kata kunci return.
		- Jika tidak menggunakan block, kita tidak perlu menggunakan kata kunci return.

	Arrow Function Tanpa Kurung parameter
		- Jika parameter di arrow function hanya satu, kita bisa tidak menggunakan kurung pada.

	Arroe Function Sebagai Parameter
		- Karna arrow function seperti anonymous function.
		- jadi kita juga bisa menggunakan arrow function sebagai parameter di function lain.


CLOSURE
	- Adalah kombinasi function dan bundel referensi ke data disekitarnya.
	- Oke agak membingungkan memaang, apalagi untuk yang pertama belajar.
	- Kita sudah tau bahwa local scope tidak bisa di akses di luar scopenya.
	- Dengan kemampuan closure, kita bisa membuat sebuah function di local scope dan referensi ke data di sekitar local scope tersebut, keluar scope nya.


OBJECT METHOD 
	- Pada tipe data object, kita sudah membahas tentang property di object
	- karna sebenarnya function juga merupakan salah satu tipe data, jadi function pun sebenarnya bisa ditambahkan sebagai property di object
	- Cara pembuatannya pun sama dengan function sebagai value
	- Function di object kadang disebut juga sebagai object method


KATA KUNCI THIS 
	- Kata kunci this adalah referensi ke object milik siapa.
	- Tiap lokasi kata kunci this, bisa berbeda-beda referensi pemiliknya .
	- Dalam Object Method, this merupakan referensi ke object pemilik functionnya.
	- Di global scope, this merupakan referensi ke global object (di browser biasanya window).
	- Dalam function, this merupakan referensi ke global object (di browser biasanya window).
	- Di function dengan strict mode (akan dibahas nanti), this adalah undefined.
	- Dalam event, this merupakan referensi ke element yang menerima event (dibahas di materi Document Object Model)


ARROW FUNCTION DI OBJECT
	- Sebelumnya kita sudah bahas tentang Arrow Function
	- Arrow Function juga bisa kita gunakan sebagai Object Method
	- Namun perlu diketahui, Arrow function tida bisa di gunakan untuk mengakses arguments object, function generator kata kunci this dan kata kunci super (dibahas di materi JS Object Oriented Programming)
	- Jadi pastikan gunakan arrow function hanya memang ketika kita tidak butuh fitur-fitur diatas.


GETTER DAN SETTER
	- Getter dan setter adalah kemampuan membuat function yang berbeda untuk mengambil data (Getter) dan mengubah data (Setter) pada sebuah property di object
	- Dengan getter da setter, kita bisa melakukan hal apapun dalam function sebelum sebuah property di akses atau diubah, misal menambah validasi dan lain-lain.


MASALAH PADA VARIBLE VAR
	- Sebelumnya sudah dijelaskan bahwa penggunaan var sudah tidak direkomendasikan lagi, dan diganti dengan let.
	- Pertanyaannya kenapa ?
	- Alasan var tidak direkomendasikan digunakan lagi adalah, karna var tidak memiliki blok scope, artinya dia tidak mengikat ke local scope yang sebelumnya sudah kita bahas. 
	- Karna masalah ini, var bisa tidak di perediksi.
	- Kita akan buat contoh penggunaan var dan let.


DESTRUCTURING
	- Destructuring adalah fitur yang bisa digunakan untuk membongkar value-value di array atau object ke dalam variable-variable baru.
	- fitur ini sangat mempermudah kita ketika ingin mengambil data dari array atau object tanpa harus melakukan pengambilan data satu persatu.

	Destructuring Function Parameter
	- Destructuring tidak hanya bisa dilakukan di variable, tapi juga bisa dilakukan di function parameter
	- Hal ini membuat kita mudah ketika ingin mengambil nested data dalam array atau object dalam function
	
	Default value
	- Yang paling menarik di destructuring adalah, kita bisa menambahkan default value
	- Jadi misal kita melakukan destructuring terhadap array, ternyata tidak ada datanya, maka kita bisa menambahkan default value
	- Begitu juga pada object, jika ternyata property nya tidak bisa menambahkan default value.

	Menggunakan Name Variable lain
	- Saat melakukan destructuring di array, kita bisa dengan mudah membuat nama variable sesuka kita.
	- Namun pada saat melakukan destructuring, kita harus membuat nama variable sama dengan nama property.
	- kita juga bisa menggunakan nama variable saat melakukan destructuring object jika kita mau.


STRICT MODE 
	- Saat kita menjalankan kode program javascript, secara default kode program kita berjalan dalam mode tidak strict, atau istilahnya sloppy mode.
	- Pada ECMASript5, diperkenalkan mode strict, dimana ketika mode strick dijalankan, maka akan merubah beberapa cara keerja di Javascript, seperti :
		1. Merubah beberapa javascript error dari yang tadinya silent error, menjadi throw error (terlihat).
		2. Mpmperbaiki beberapa kesalahan engine javaScript untuk optimisasi.
		3. menolak beberapa kode perintah yang kedepannya akan digunakan di ECMAScript

	Cara Menyalakan Strict Mode
	- Untuk menyalakan strick mode, kita bisa menambahkan `use strict` pada baris awal javascript kita.
	- Atau bisa juga ditambahkan di awal function kita.


DEBUGGER
	- Debugger digunakan untuk melakukan proses debugging
	- Debugging adalah proses mencari bug (masalah) yng bisa terjadi di kode program kita.
	- Dengan debugger kita bisa menghentikan kode program di posisi yang kita inginkan (breakpoint), lalu melihat semua isi variable yang ada pada saat kode program sedang berhenti.


MATERI SELANJUTNYA 
	- JavaScript Object Oriented Programming
	- JavaScript Modules
	- JavaScript Document Object Model
	- JavaScript Async
	- JavaScript Web API